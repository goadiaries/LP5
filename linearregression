import tensorflow as tf
from tensorflow.keras.datasets import boston_housing
from sklearn import preprocessing

(train_x, train_y), (test_x, test_y) = boston_housing.load_data()

print("Train shape : ", train_x.shape)
print("Test shape : ", test_x.shape)
print("Actual Train Output : ", train_y.shape)
print("Actual Test Output : ", test_y.shape)

train_x[0]

train_y[0]

train_x = preprocessing.normalize(train_x)
test_x = preprocessing.normalize(test_x)

train_x[0]

train_y[0]

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import *

def HousePredictionModel():
  model = Sequential()
  model.add(Dense(128, activation = 'relu', input_shape = (train_x[0].shape)))
  model.add(Dense(64, activation = 'relu'))
  model.add(Dense(32, activation = 'relu'))

  model.add(Dense(1))

  model.compile(optimizer = 'rmsprop', loss = 'mse', metrics = ['mae'])

  return model


import numpy as np
k = 4
num_val_samples = len(train_x)
num_epochs = 30
all_scores = []

model = HousePredictionModel()
hostory = model.fit(x = train_x, y = train_y, epochs = num_epochs, batch_size = 1, verbose = 1, validation_data = (test_x, test_y))

model.summary()

from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
import numpy as np

y_pred =model.predict(test_x)

from sklearn.metrics import r2_score
r2 = r2_score(test_y, y_pred)
print(r2)

from sklearn.metrics import mean_squared_error
rmse = (np.sqrt(mean_squared_error(test_y, y_pred)))
print(rmse)
